"""
Analyse scan results from eprop-motor-control parameter sweeps.

This script reads the scan_summary.csv file generated by eprop-reaching-task.py parameter scans,
and generates heatmaps of the log10(final loss) for all pairs of scanned parameters.
If more than two parameters are scanned, it generates a heatmap for each pair.
The heatmaps are saved as PNG files in the sim_results directory.

- The axes are automatically detected from columns with more than one unique value (excluding known metadata columns).
- The heatmap always uses a log10 scale for better visibility.
- The script is headless and does not display plots, only saves them.

Usage:
    python analyse_scan_results.py

Requirements:
    pandas, matplotlib, numpy
"""

import matplotlib

matplotlib.use("Agg")
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import os
import itertools

csv_path = os.path.join(os.path.dirname(__file__), "sim_results", "scan_summary.csv")

try:
    df = pd.read_csv(csv_path)
    # Exclude columns that are not scan parameters
    exclude_cols = {"final_loss", "folder"}
    # Exclude columns with only one unique value or that are dicts/strs
    scan_cols = [
        col
        for col in df.columns
        if col not in exclude_cols and df[col].nunique() > 1 and df[col].dtype != object
    ]
    if len(scan_cols) < 2:
        raise ValueError(
            f"Not enough scanned parameters with more than one unique value to plot a heatmap. Found: {scan_cols}"
        )
    out_dir = os.path.dirname(csv_path)

    def plot_heatmap(pivot, title, filename):
        plt.figure(figsize=(8, 6))
        data = pivot.values
        data_to_plot = np.log10(np.clip(data, 1e-12, None))
        cbar_label = "log10(Final Loss)"
        im = plt.imshow(data_to_plot, aspect="auto", cmap="viridis", origin="lower")
        plt.colorbar(im, label=cbar_label)
        plt.xticks(np.arange(len(pivot.columns)), pivot.columns, rotation=45)
        plt.yticks(np.arange(len(pivot.index)), pivot.index)
        plt.xlabel(pivot.columns.name)
        plt.ylabel(pivot.index.name)
        plt.title(title)
        for i in range(data.shape[0]):
            for j in range(data.shape[1]):
                val = data[i, j]
                if not np.isnan(val):
                    plt.text(
                        j,
                        i,
                        f"{np.log10(val):.2f}",
                        ha="center",
                        va="center",
                        color="w",
                        fontsize=8,
                    )
        plt.tight_layout()
        plt.savefig(filename)
        plt.close()

    # Plot heatmaps for all pairs of scan parameters
    for x_col, y_col in itertools.combinations(scan_cols, 2):
        df_grouped = df.groupby([y_col, x_col], as_index=False)["final_loss"].mean()
        pivot = df_grouped.pivot(index=y_col, columns=x_col, values="final_loss")
        pivot = pivot.sort_index().sort_index(axis=1)
        fig_path = os.path.join(out_dir, f"final_loss_heatmap_{y_col}_vs_{x_col}.png")
        plot_heatmap(pivot, f"Final Loss Heatmap ({y_col} vs {x_col})", fig_path)
except FileNotFoundError:
    print(f"CSV file not found: {csv_path}")
except Exception as e:
    print(f"Error: {e}")
